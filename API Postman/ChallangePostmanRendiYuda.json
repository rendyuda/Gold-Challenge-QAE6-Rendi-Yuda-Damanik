{
	"info": {
		"_postman_id": "94429fbf-0637-4b1a-b9ef-4c2e48a96bfe",
		"name": "Challange Postman Rendi Yuda",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25395213"
	},
	"item": [
		{
			"name": "POST Register Seller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var email = responseJson.email;\r",
							"pm.environment.set(\"email\", email);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.full_name).to.eql('Panji');\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "full_name",
							"value": "Panji",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "phone_number",
							"value": "081212121212",
							"type": "text"
						},
						{
							"key": "address",
							"value": "Jakarta",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "city",
							"value": "Tangsel",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}auth/register",
					"host": [
						"{{baseUrl}}auth"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var access_token = responseJson.access_token;\r",
							"pm.environment.set(\"token_seller\", access_token);\r",
							"\r",
							"pm.test(\"To verify status code\", function (){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Respose time is under 2000ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"//memvalidasi kalo name = Name Testing\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql('Panji');\r",
							"});\r",
							"\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"access_token\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"access_token\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}auth/login",
					"host": [
						"{{baseUrl}}auth"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Seller Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var id = responseJson.id;\r",
							"pm.environment.set(\"product_id\", id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"base_price\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"user_id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"image_url\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image_name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"updatedAt\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"createdAt\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"description\",\r",
							"    \"base_price\",\r",
							"    \"location\",\r",
							"    \"user_id\",\r",
							"    \"image_url\",\r",
							"    \"image_name\",\r",
							"    \"updatedAt\",\r",
							"    \"createdAt\",\r",
							"    \"status\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_seller}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kapal Antik",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Antik dan cepat",
							"type": "text"
						},
						{
							"key": "base_price",
							"value": "65000000",
							"type": "text"
						},
						{
							"key": "category_ids",
							"value": "[1, 2]",
							"type": "text"
						},
						{
							"key": "location",
							"value": "Jakarta Timur",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": "/C:/Users/Dixza/Downloads/SS LinkedIn Teknovo.jpg"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}seller/product",
					"host": [
						"{{baseUrl}}seller"
					],
					"path": [
						"product"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Seller Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_seller}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}seller/product",
					"host": [
						"{{baseUrl}}seller"
					],
					"path": [
						"product"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Seller Product ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql('Kapal Antik');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_seller}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}seller/product/{{product_id}}",
					"host": [
						"{{baseUrl}}seller"
					],
					"path": [
						"product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Register Buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var email = responseJson.email;\r",
							"pm.environment.set(\"email_buyer\", email);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.full_name).to.eql('Pragiwaksono');\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "full_name",
							"value": "Pragiwaksono",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{$randomEmail}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "phone_number",
							"value": "081212121212",
							"type": "text"
						},
						{
							"key": "address",
							"value": "Jakarta",
							"type": "text"
						},
						{
							"key": "image",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "city",
							"value": "Jakarta",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}auth/register",
					"host": [
						"{{baseUrl}}auth"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Login Buyer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var access_token = responseJson.access_token;\r",
							"pm.environment.set(\"token_buyer\", access_token)\r",
							"\r",
							"pm.test(\"To verify status code\", function (){\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Respose time is under 2000ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"//memvalidasi kalo name = Name Testing\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.eql('Pragiwaksono');\r",
							"});\r",
							"\r",
							"const schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"access_token\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"access_token\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Response data structure is correct\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email_buyer}}\",\r\n  \"password\": \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}auth/login",
					"host": [
						"{{baseUrl}}auth"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Buyer Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{baseUrl}}buyer/product?page=2&per_page=3",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"product"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "per_page",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Buyer Product ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}buyer/product/{{product_id}}",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Buyer Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();\r",
							"var id = responseJson.id;\r",
							"pm.environment.set(\"order_id\", id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_buyer}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"product_id\": {{product_id}},\r\n  \"bid_price\": 40000000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}buyer/order",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Buyer Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_buyer}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}buyer/order",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Buyer Order ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body data is correct\", function (){\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.product_name).to.eql('Kapal Antik');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_buyer}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}buyer/order/{{order_id}}",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"order",
						"{{order_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Buyer Order ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_buyer}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bid_price\": 45000000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}buyer/order/{{order_id}}",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"order",
						"{{order_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Buyer Order ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_buyer}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}buyer/order/{{order_id}}",
					"host": [
						"{{baseUrl}}buyer"
					],
					"path": [
						"order",
						"{{order_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Seller Product ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "access_token",
						"value": "{{token_seller}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}seller/product/{{product_id}}",
					"host": [
						"{{baseUrl}}seller"
					],
					"path": [
						"product",
						"{{product_id}}"
					]
				}
			},
			"response": []
		}
	]
}